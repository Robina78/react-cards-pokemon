{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport Axios from \"axios\";\nimport useLocalStorage from \"./useLocalStorage\";\n\nfunction useAxios(keyInLS, baseUrl) {\n  _s();\n\n  const [response, setResponse] = useLocalStorage(keyInLS);\n\n  const addResponseData = async (formatter = data => data, restOfUrl = \"\") => {\n    const response = await Axios.get(`${baseUrl}${restOfUrl}`);\n    setResponse(data => [...data, formatter(response.data)]);\n  };\n\n  const cleareResponse = () => setResponse([]);\n\n  return [response, addResponseData, cleareResponse];\n}\n\n_s(useAxios, \"yJmJKlDB6SRRZiQ9FD2k2peGBkE=\", false, function () {\n  return [useLocalStorage];\n});\n\nexport default useAxios;","map":{"version":3,"sources":["D:/springboard/reactjs/exercises/react-cards-pokemon/src/hooks/useAxios.js"],"names":["useState","useEffect","Axios","useLocalStorage","useAxios","keyInLS","baseUrl","response","setResponse","addResponseData","formatter","data","restOfUrl","get","cleareResponse"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAGA,SAASC,QAAT,CAAkBC,OAAlB,EAA2BC,OAA3B,EAAoC;AAAA;;AAChC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,eAAe,CAACE,OAAD,CAA/C;;AAEA,QAAMI,eAAe,GAAG,OAAOC,SAAS,GAAGC,IAAI,IAAIA,IAA3B,EAAiCC,SAAS,GAAG,EAA7C,KAAoD;AACxE,UAAML,QAAQ,GAAG,MAAML,KAAK,CAACW,GAAN,CAAW,GAAEP,OAAQ,GAAEM,SAAU,EAAjC,CAAvB;AACAJ,IAAAA,WAAW,CAACG,IAAI,IAAI,CAAC,GAAGA,IAAJ,EAAUD,SAAS,CAACH,QAAQ,CAACI,IAAV,CAAnB,CAAT,CAAX;AACH,GAHD;;AAKA,QAAMG,cAAc,GAAG,MAAMN,WAAW,CAAC,EAAD,CAAxC;;AAEA,SAAO,CAACD,QAAD,EAAWE,eAAX,EAA4BK,cAA5B,CAAP;AACH;;GAXQV,Q;UAC2BD,e;;;AAYpC,eAAeC,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport Axios from \"axios\";\r\nimport useLocalStorage from \"./useLocalStorage\";\r\n\r\n\r\nfunction useAxios(keyInLS, baseUrl) {\r\n    const [response, setResponse] = useLocalStorage(keyInLS);\r\n\r\n    const addResponseData = async (formatter = data => data, restOfUrl = \"\") => {\r\n        const response = await Axios.get(`${baseUrl}${restOfUrl}`);\r\n        setResponse(data => [...data, formatter(response.data)]);\r\n    };\r\n\r\n    const cleareResponse = () => setResponse([]);\r\n\r\n    return [response, addResponseData, cleareResponse];\r\n}\r\n\r\nexport default useAxios;"]},"metadata":{},"sourceType":"module"}